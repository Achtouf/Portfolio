$_c: avatar;

@mixin generate-avatar-halo($_color, $_background, $_width, $_gap) {
  box-shadow:
    0 0 0 #{$_gap} #{$_background},
    0 0 0 calc($_width + $_gap) #{$_color};
  // box-shadow: 0 0 0 #{$_gap} #{$_background}, 0 0 0 calc($_width + $_gap) #{$_color}, 0 0 0 calc($_width + ($_gap * 2)) #{$_background};
}

@if $mAvatarClass {
  .#{$mPrefix}#{$_c} {
    $_prefix: &;

    position: relative;

    display: inline-flex;
    align-items: center;
    align-content: center;
    justify-content: center;

    width: variable(#{$_c}-size);
    min-width: variable(#{$_c}-size);
    max-width: variable(#{$_c}-size);

    height: variable(#{$_c}-size);
    min-height: variable(#{$_c}-size);
    max-height: variable(#{$_c}-size);

    text-align: center;
    vertical-align: bottom;

    color: variable(#{$_c}-text-color);
    font-family: variable(font-family);
    font-size: variable(#{$_c}-font-size);
    font-weight: variable(#{$_c}-font-weight);

    outline: none;

    border: none;
    transition: variable(#{$_c}-transition);
    border-radius: variable(#{$_c}-border-radius);
    background-color: variable(neutral-main, transparent);
    // background-color: variable(#{$_c}-background-color, transparent);

    // Icon
    .#{$mPrefix}icon {
      font-size: inherit;
    }

    // Avatar Set
    &set {
      & #{$_prefix} {
        $_gap: variable(#{$_c}-halo-gap);
        $_width: variable(#{$_c}-border-width);
        $_background: variable(#{$_c}-halo-background-color);

        @include generate-avatar-halo($_background, $_background, $_width, 0rem);

        &:not(:last-child) {
          margin-right: variable(#{$_c}-set-gap);
        }
      }
    }

    // Background
    & > #{$_prefix}-background {
      inset: 0;
      z-index: 0;
      position: absolute;
    }

    // Sizes
    @each $_size, $_ratio in $mSizesProperties {
      &#{$_prefix}-#{$_size} {
        font-size: variable(#{$_c}-#{$_size}-font-size);

        width: variable(#{$_c}-#{$_size}-size);
        min-width: variable(#{$_c}-#{$_size}-size);
        max-width: variable(#{$_c}-#{$_size}-size);

        height: variable(#{$_c}-#{$_size}-size);
        min-height: variable(#{$_c}-#{$_size}-size);
        max-height: variable(#{$_c}-#{$_size}-size);

        border-radius: variable(#{$_c}-#{$_size}-border-radius);

        &#{$_prefix}-icon {
          font-size: variable(#{$_c}-#{$_size}-icon-size);
        }

        &#{$_prefix}-image {
          & > .m-image {
            border-radius: variable(#{$_c}-#{$_size}-border-radius);
          }
        }

        &#{$_prefix}-circle {
          & > .m-image {
            border-radius: 50%;
          }
        }
      }

      // Avatar Set
      &set {
        & #{$_prefix}-#{$_size} {
          $_gap: variable(#{$_c}-halo-gap);
          // $_width: variable(#{$_c}-halo-width);
          $_background: variable(#{$_c}-halo-background-color);
          $_width: variable(#{$_c}-#{$_size}-border-width);

          @include generate-avatar-halo($_background, $_background, $_width, 0rem);

          &:not(:first-child) {
            margin-left: variable(#{$_c}-#{$_size}-gap, variable(#{$_c}-set-gap));
          }
        }
      }
    }

    & > .m-image {
      inset: 0;
      position: relative;

      width: 100%;
      height: 100%;

      object-fit: cover;
      border-radius: variable(#{$_c}-border-radius);
    }

    &.#{$mPrefix}overlay-badge {
      .#{$mPrefix}badge {
        transform: translate(0, 0);
      }
    }

    &#{$_prefix}-circle {
      border-radius: 50%;

      & > .m-image {
        border-radius: 50%;
      }
    }

    // Halo
    &#{$_prefix}-halo {
      // $_color: variable(#{$_c}-background-color);
      $_color: variable(neutral-main);

      $_gap: variable(#{$_c}-halo-gap);
      $_width: variable(#{$_c}-halo-width);
      $_background: variable(#{$_c}-halo-background-color);

      @include generate-avatar-halo($_color, $_background, $_width, $_gap);
      // border: variable(avatar-halo-gap) solid variable(#{$_c}-border-color);

      @each $_level in $mSeveritiesList {
        $_color: variable(#{$_level}-main);

        $_gap: variable(#{$_c}-halo-gap);
        $_width: variable(#{$_c}-halo-width);
        $_background: variable(#{$_c}-halo-background-color);
        // $_width: variable(#{$_c}-#{$_size}-border-width);

        &.#{$mPrefix}#{$_level} {
          @include generate-avatar-halo($_color, $_background, $_width, $_gap);
        }
      }
    }
  }
}
