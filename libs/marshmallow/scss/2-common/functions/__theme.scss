@use "sass:map";
@use "sass:string";

@function is-theme-consistent($_theme: ()) {
  $_name: map.get($_theme, name);

  // Scheme
  @if not map-contains($_theme, scheme) {
    @error "[#{$_name}]: A scheme is missing and must be specified for this theme !";
    @return false;
  }

  $_scheme: map.get($_theme, scheme);
  @if not list-contains((dark, light), string.to-lower-case($_scheme)) {
    @error "[#{$_name}]: Scheme '#{$_scheme}' can only be be 'dark' or 'light' !";
    @return false;
  }

  // Severities
  @each $_level in $mSeveritiesList {
    @if not map.has-key($_theme, $_level) {
      @error "[#{$_name}]: Severity '#{$_level}' is missing and must be specified for this theme !";
      @return false;
    }
  }

  // TODO: Check components later

  // TODO: Check colors later

  @return true;
}

@function generate-theme-core($_theme: ()) {
  $_result: $_theme;

  $_result: map.set(
    $_result,
    core,
    merge-map(
      (
        name: map.get($_result, name),
        scheme: map.get($_result, scheme),

        unit: 10px,
        font-size: 1.2rem,
        text-color: black,

        inset: 1rem,
        margin: 1rem,
        sizing: 1rem,
        padding: 1rem,
        translate: 1rem,
        animation: 0.1s,

        color: (
          step: $mColorShadesStep,
          range: $mColorShadesRange
        ),

        transition: all 0.1s linear,
        shadow: map.get(map.get($_result, background), accent),
        border-color: map.get(map.get($_result, neutral), main)
      ),
      map.get($_result, core)
    )
  );

  @return $_result;
}

@function generate-theme-colors($_theme: (), $_withContrast: false) {
  $_list: "";

  $_result: $_theme;
  $_core: map.get($_result, core);
  $_scheme: map.get($_result, scheme);

  $_colors: ();
  $_initialColors: ();
  $_alphaColors: (overlay shadow);

  // Severities
  @each $_status in $mStatusesList {
    $_color: map.get($_theme, $_status);
    @if not is-empty($_color) {
      $_color: map.get($_color, main);
      @if not is-empty($_color) {
        $_color: (#{$_status}: $_color);
        $_colors: map.merge($_color, $_colors);
      }
    }
  }

  // Shadow
  @if map-contains($_core, shadow) {
    $_initialColors: map.set($_initialColors, shadow, map.get($_core, shadow));
  }

  // Additional
  @if map-contains($_result, colors) {
    $_initialColors: merge-map($_initialColors, map.get($_theme, colors));
  }

  // Result
  $_colors: merge-map($_colors, $_initialColors);
  @each $_name, $_color in $_colors {
    $_shades: generate-color-shades-pack(
      $_color,
      $_scheme,
      $_withContrast: $_withContrast,
      $_withAlpha: list-contains($_alphaColors, $_name)
    );
    $_shades: () !default;
    $_result: merge-map($_result, (#{$_name}: $_shades));
  }

  // List
  @each $_color in $mStatusesList {
    $_list: "#{$_list} #{$_color}";
  }
  @each $_color, $_hex in $_initialColors {
    $_list: "#{$_list} #{$_color}";
  }

  $_result: map.set(
    $_result,
    core,
    merge-map(
      (
        color-list: $_list
      ),
      map.get($_result, core)
    )
  );

  @return $_result;
}

@function generate-theme-components($_theme: ()) {
  $_result: $_theme;

  // Components
  @each $_component in $components {
    // @debug "#{$_component}";
    $_properties: get-component-properties($_result, $_component);
    @if is-map($_properties) {
      $_result: map.set($_result, #{$_component}, $_properties);
    }
  }

  @return $_result;
}

@function build-theme($_theme: (), $_colorsWithContrast: true) {
  $theme: ();
  $_result: merge-map($theme, $_theme);

  @if not is-theme-consistent($_result) {
    $_name: map.get($_result, name);
    @error "[#{_name}]: Theme configuration not valid";
    @return null;
  }

  // Core
  $_result: generate-theme-core($_result);

  // Colors
  $_result: generate-theme-colors($_result, $_colorsWithContrast);

  // Components
  $_result: generate-theme-components($_result);

  // Shades
  // $result: generate-theme-shades($result, $mColorsListWithContrast);

  // Result
  $theme: $_result;
  @return $_result;
}
