$_c: accordion;

.#{$mPrefix}#{$_c} {
  $_prefix: &;

  display: flex;
  flex-direction: column;
  gap: variable(#{$_c}-gap);

  width: 100%;

  &-tab {
    display: flex;
    flex-direction: column;

    width: 100%;

    box-shadow: variable(#{$_c}-box-shadow);

    transition: variable(#{$_c}-transition);
    background-color: variable(#{$_c}-background-color);

    &.#{$mPrefix} {
      &active {
        #{$_prefix}-header {
          border-bottom-left-radius: 0;
          border-bottom-right-radius: 0;

          &-link {
            color: variable(#{$_c}-active-header-color);
            background-color: variable(#{$_c}-active-header-background-color);
          }
        }
      }

      &disabled {
        opacity: variable(#{$_c}-disabled-opacity);

        #{$_prefix}-header-link {
          color: variable(#{$_c}-disabled-header-color);
          background-color: variable(#{$_c}-disabled-header-background-color);
        }

        #{$_prefix}-content,
        #{$_prefix}-header-link {
          $_pState: -disabled;
          $_borderProperties: border-width border-style border-color;

          &:not(:last-child) {
            @each $_property in $_borderProperties {
              @include component-property-or-normal(
                $_c,
                "-#{$_pState}",
                $_property
              );
            }
          }
        }
      }
    }

    &:not(.#{$mPrefix}disabled) {
      @each $_state in (hover focus active) {
        $_pState: -#{$_state};
        $_borderProperties: border-width border-style border-color;

        @include component-on-states($_state) {
          #{$_prefix}-content,
          #{$_prefix}-header-link {
            @each $_property in $_borderProperties {
              @include component-property-or-normal(
                $_c,
                "-#{$_state}",
                $_property
              );
            }
          }
        }

        #{$_prefix}-header-link {
          &:#{$_state} {
            color: variable(#{$_c}-#{$_state}-header-color);
            background-color: variable(
              #{$_c}-#{$_state}-header-background-color
            );
          }
        }
      }

      #{$_prefix}-header-link {
        .#{$mPrefix}focus,
        &:focus-visible {
          outline: 0 none;
          outline-offset: 0;

          $_color: variable(#{$_c}-outline-color);
          $_width: variable(#{$_c}-outline-width);
          $_gapColor: variable(#{$_c}-outline-gap-color);
          $_gapWidth: variable(#{$_c}-outline-gap-width);

          @include generate-component-outline(
            $_color,
            $_width,
            $_gapColor,
            $_gapWidth
          );
        }
      }
    }
  }

  &-header {
    display: flex;
    align-items: center;

    width: 100%;
    min-height: variable(#{$_c}-header-min-height);

    border-radius: variable(#{$_c}-border-radius);
    transition: variable(#{$_c}-header-transition, variable(#{$_c}-transition));

    &-link {
      position: relative;

      display: flex;
      align-items: center;
      gap: variable(#{$_c}-header-gap);

      padding: variable(#{$_c}-header-padding);

      width: 100%;
      min-height: variable(#{$_c}-header-min-height);

      text-decoration: none;
      color: variable(#{$_c}-header-color);
      font-size: variable(#{$_c}-header-font-size);
      font-weight: variable(#{$_c}-header-font-weight);

      user-select: none;
      -webkit-user-select: none;

      cursor: pointer;

      border-radius: inherit;
      border-width: variable(#{$_c}-border-width);
      border-style: variable(#{$_c}-border-style);
      border-color: variable(#{$_c}-border-color);

      background-color: variable(#{$_c}-header-background-color);
      transition: variable(
        #{$_c}-header-transition,
        variable(#{$_c}-transition)
      );

      @include component-on-states(focus) {
        z-index: 1;
      }
    }

    &-icon {
      color: variable(#{$_c}-header-icon-color);
      size: variable(#{$_c}-header-icon-size);
    }
  }

  &-content {
    padding: variable(#{$_c}-content-padding);
    width: 100%;

    color: variable(#{$_c}-content-text-color);
    font-size: variable(#{$_c}-content-font-size);
    font-weight: variable(#{$_c}-content-font-weight);

    border-width: variable(#{$_c}-border-width);
    border-style: variable(#{$_c}-border-style);
    border-color: variable(#{$_c}-border-color);

    overflow: hidden;
    background-color: variable(#{$_c}-content-background-color);

    &.#{$mPrefix}visible {
      overflow: inherit;

      border-top: none !important;
      border-top-left-radius: 0;
      border-top-right-radius: 0;
    }
  }

  &-header,
  &-content {
    border-radius: variable(#{$_c}-border-radius);
  }
}
