@mixin generate-button-kind($_severity, $_parent: "") {
  $_prefix: button-#{$_severity}-normal;

  $_textColor: variable(#{$_prefix}-text);
  $_borderColor: variable(#{$_prefix}-border);
  $_backgroundColor: variable(
    button-#{$_severity}-focus-outline,
    variable(#{$_prefix}-background)
  );

  &.#{$mPrefix}focus,
  &:focus-visible {
    @include generate-component-outline($_backgroundColor);
  }

  $_buttonStates: hover active disabled blocked;
  $_buttonKinds: (
    "": normal,
    "text": text,
    "plain": plain,
    "outlined": outlined,
  );

  @each $_key, $_kind in $_buttonKinds {
    $_name: prefix($_key);
    $_prefix: button-#{$_severity}-#{$_kind};

    &#{$_parent}#{$_name} {
      $_textColor: variable(#{$_prefix}-text);
      $_borderColor: variable(#{$_prefix}-border);
      $_backgroundColor: variable(#{$_prefix}-background);

      color: $_textColor;
      border-color: $_borderColor;
      background-color: $_backgroundColor;

      @each $_state in $_buttonStates {
        @include component-on-states($_state) {
          $_textColor: variable(#{$_prefix}-#{$_state}-text);
          $_borderColor: variable(#{$_prefix}-#{$_state}-border);
          $_backgroundColor: variable(#{$_prefix}-#{$_state}-background);

          color: $_textColor;
          border-color: $_borderColor;
          background-color: $_backgroundColor;
        }
      }
    }
  }
}

.#{$mPrefix}button {
  $_prefix: &;

  display: inline-flex;
  align-items: center;
  align-content: center;
  justify-content: center;
  gap: variable(button-gap);

  // margin: 0;
  padding: variable(button-padding);

  // width: 100%;
  width: auto;
  height: variable(button-height);

  // line-height: 1;
  text-align: center;
  white-space: nowrap;
  vertical-align: bottom;
  color: variable(text-color);
  font-family: variable(font-family);
  font-size: variable(button-font-size);
  font-weight: variable(button-font-weight);

  outline: none;
  cursor: pointer;
  // overflow: hidden;
  user-select: none;
  transition: variable(button-transition);

  border-style: solid;
  border-color: transparent;
  border-width: variable(button-border-width);
  border-radius: variable(button-border-radius);

  background-color: variable(button-background-color, transparent);

  .#{$mPrefix}icon {
    font-size: variable(button-icon-size);
  }

  @include component-on-states(disabled) {
    cursor: variable(button-disabled-cursor);
    opacity: variable(button-disabled-opacity);
    pointer-events: variable(button-disabled-pointer-events);
  }

  // Severities
  @each $status in $mSeveritiesList {
    &.#{$mPrefix}#{$status} {
      @include generate-button-kind($status, $_prefix);
    }
  }

  // Link
  &#{$_prefix}-link {
    @extend #{$_prefix}-text !optional;

    @include component-on-states(hover) {
      text-decoration: underline;
    }

    .#{$mPrefix}focus,
    &:focus-visible {
      text-decoration: underline;
      @include generate-component-outline(transparent);
    }
  }

  // Icons
  &#{$_prefix}-icon {
    $_height: variable(button-height);

    padding: 0;
    font-size: variable(button-icon-size);

    @include fix-size(width, $_height);
    @include fix-size(height, $_height);

    .#{$mPrefix}icon {
      font-size: variable(button-icon-size);
    }
  }

  // Sizes
  @each $_size, $_ratio in $mSizesProperties {
    $_height: variable(button-#{$_size}-height);

    &#{$_prefix}-#{$_size} {
      gap: variable(button-#{$_size}-gap);
      padding: variable(button-#{$_size}-padding);

      font-size: variable(button-#{$_size}-font-size);

      @include fix-size(height, $_height);
      border-radius: variable(button-#{$_size}-border-radius);

      &#{$_prefix}-rounded {
        border-radius: variable(button-#{$_size}-rounded-border-radius);
      }

      &#{$_prefix}-icon {
        padding: 0;
        font-size: variable(button-#{$_size}-icon-size);

        @include fix-size(width, $_height);
        @include fix-size(height, $_height);
      }

      .#{$mPrefix}icon {
        font-size: variable(button-#{$_size}-icon-size);
      }
    }
  }

  &#{$_prefix}-rounded {
    border-radius: variable(button-rounded-border-radius);
  }

  &#{$_prefix}-sharp {
    border-radius: 0rem;
  }

  &#{$_prefix}-raised {
    box-shadow: variable(button-box-shadow);
  }

  @include component-on-states(blocked) {
    cursor: variable(button-blocked-cursor, auto);
    pointer-events: variable(button-blocked-pointer-events, none);
  }

  // Button set
  &set {
    display: flex;

    & > #{$_prefix} {
      margin: 0;

      &:not(:first-of-type) {
        margin-left: calc(variable(button-border-width) * -1);
      }

      &:not(:first-of-type):not(:last-of-type) {
        border-radius: 0;
      }

      &:first-of-type {
        border-top-right-radius: 0;
        border-bottom-right-radius: 0;
      }

      &:last-of-type {
        border-top-left-radius: 0;
        border-bottom-left-radius: 0;
      }

      @include component-on-states(focus) {
        z-index: 1;
        position: relative;
      }
    }
  }
}
