$_c: dropdown;

.#{$pPrefix}#{$_c} {
  $_prefix: #{$pPrefix}#{$_c};

  width: 100%;

  outline: none;
  appearance: none;

  $_states: hover focus active;

  $_borderProperties: border-width border-style border-color border-radius;
  $_properties: font-size font-family color height transition background-color;

  @each $_prop in $_properties {
    #{$_prop}: variable(#{$_c}-#{$_prop});
  }

  @each $_prop in $_borderProperties {
    #{$_prop}: variable(#{$_c}-#{$_prop});
  }

  &:not(.#{$pPrefix}disabled) {
    &:hover {
      @each $_prop in $_borderProperties {
        @include component-property-or-normal($_c, '-hover', $_prop);
      }

      @each $_prop in $_properties {
        @include component-property-or-normal($_c, '-hover', $_prop);
      }
    }

    &.#{$pPrefix}focus {
      $_color: variable(#{$_c}-outline-color);
      $_width: variable(#{$_c}-outline-width);
      $_gapColor: variable(#{$_c}-outline-gap-color);
      $_gapWidth: variable(#{$_c}-outline-gap-width);

      @include generate-component-outline(
        $_color,
        $_width,
        $_gapColor,
        $_gapWidth
      );
    }

    &.#{$_prefix}-open {
      $_properties: color border-color background-color;
      @each $_prop in $_properties {
        #{$_prop}: variable(#{$_c}-active-#{$_prop});
      }
    }
  }

  &.#{$pPrefix}disabled {
    $_properties: color background-color;

    @each $_prop in $_properties {
      @include component-property-or-normal($_c, '-disabled', $_prop);
    }

    @each $_prop in $_borderProperties {
      @include component-property-or-normal($_c, '-disabled', $_prop);
    }
  }

  &-clearable {
    .#{$_prefix} {
      &-label {
        // TODO: Clear button width
        padding-right: 2rem;
      }
    }
  }

  &-label {
    padding: variable(#{$_c}-padding);

    border: 0 none;
    background: transparent;

    &.#{$pPrefix}placeholder {
      color: variable(#{$_c}-placeholder-color);
      font-size: variable(#{$_c}-placeholder-font-size);
      font-family: variable(#{$_c}-placeholder-font-family);
    }

    max-width: 100%;
    overflow-x: clip;
    white-space: nowrap;
    word-break: keep-all;
    -webkit-line-clamp: 1;
    text-overflow: ellipsis;
  }

  &-trigger {
    padding: variable(#{$_c}-trigger-padding);
    width: variable(#{$_c}-trigger-width);

    &-icon {
      color: variable(#{$_c}-trigger-icon-color);
    }
  }

  &-panel {
    color: variable(#{$_c}-panel-color);
    padding: variable(#{$_c}-panel-padding);

    border-width: variable(#{$_c}-panel-border-width);
    border-style: variable(#{$_c}-panel-border-style);
    border-color: variable(#{$_c}-panel-border-color);
    border-radius: variable(#{$_c}-panel-border-radius);

    box-shadow: variable(#{$_c}-panel-box-shadow);
    background-color: variable(#{$_c}-panel-background-color);
  }

  &-header {
    color: variable(#{$_c}-header-color);
    padding: variable(#{$_c}-header-padding);
    background-color: variable(#{$_c}-header-background-color);
  }

  &-filter {
    &-container {
      position: relative;

      color: variable(#{$_c}-filter-color);
      padding: variable(#{$_c}-filter-padding);
      background-color: variable(#{$_c}-filter-background-color);

      $_name: filter;
      $_properties: color padding background-color;
      @each $_prop in $_properties {
        #{$_prop}: variable(#{$_c}-#{$_name}-#{$_prop});
      }
    }

    &-icon {
      right: 0;
      bottom: 0;
      position: absolute;

      margin: 0;
      display: flex;
      align-items: center;
      justify-content: center;
      padding: variable(#{$_c}-filter-icon-padding);

      height: 100%;
      width: variable(#{$_c}-filter-icon-width);

      color: variable(#{$_c}-filter-icon-color);
    }
  }

  &-items {
    width: 100%;
    padding: variable(#{$_c}-list-padding) !important;
    background-color: variable(#{$_c}-list-background-color);
  }

  &-item {
    &,
    &-group {
      padding: variable(#{$_c}-item-padding);
      transition: variable(#{$_c}-transition);
    }

    &:not(.#{$pPrefix}highlight):not(.#{$pPrefix}disabled) {
      &:hover {
        $_name: item-hover;
        $_properties: color background-color;
        @each $_prop in $_properties {
          #{$_prop}: variable(#{$_c}-#{$_name}-#{$_prop});
        }
      }
    }

    &.#{$pPrefix}highlight {
      $_name: item-active;
      $_properties: color background-color;
      @each $_prop in $_properties {
        #{$_prop}: variable(#{$_c}-#{$_name}-#{$_prop});
      }
    }

    @extend .#{$mPrefix}text-ellipsis !optional;
  }

  &-clear {
    &-icon {
      top: 0;
      bottom: 0;
      position: relative !important;

      margin: 0;
      display: flex;
      align-items: center;
      justify-content: center;

      height: 100%;

      $_name: clear-icon;
      $_properties: width color padding background-color;
      @each $_prop in $_properties {
        #{$_prop}: variable(#{$_c}-#{$_name}-#{$_prop});
      }
    }
  }

  &-empty {
    &-message {
      display: flex;
      align-items: center;
      justify-content: center;

      $_name: empty;
      $_properties: font-size font-weight color padding background-color;
      @each $_prop in $_properties {
        #{$_prop}: variable(#{$_c}-#{$_name}-#{$_prop});
      }
    }
  }

  &-clear,
  &-filter {
    &-icon {
      top: 0 !important;
      margin-top: 0 !important;
    }
  }

  &.ng-dirty {
    $_conditions: valid invalid;
    @each $_condition in $_conditions {
      .ng-#{$_condition} > .#{$_prefix} {
        $_pCondition: #{$_c}-#{$_condition};

        color: variable(#{$_pCondition}-color);
        border-color: variable(#{$_pCondition}-border-color);
        background-color: variable(#{$_pCondition}-background-color);
      }
    }
  }
}
