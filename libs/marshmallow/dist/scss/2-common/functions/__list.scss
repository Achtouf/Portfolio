@use "sass:list";
@use "sass:meta";
@use "sass:math";

@function is-list($_object) {
  @return meta.type-of($_object) == "list";
}

@function is-list-empty($_list) {
  @return length($_list) <= 0;
}

@function list-contains($_list, $_value) {
  @return not is-null(index($_list, $_value));
}

@function list-get-nth($_list, $_index) {
  @if (is-list-empty($_list)) {
    @return null;
  }
  @return nth($_list, $_index);
}

@function merge-list($_list: (), $_additional: ()) {
  @return list.join($_list, $_additional);
}

@function reverse-list($_list: (), $_separator: auto) {
  $_result: null;

  @if not is-list($_list) {
    @warn "The given $_list parameter in not a list for `reverse-list`.";
  } @else {
    $_length: length($_list);
    @for $_index from 1 through math.floor(math.div($_length, 2)) {
      $item: list.nth($_list, $_index);
      $_list: list.set-nth($_list, $_index, list.nth($_list, $_index * -1));
      $_list: list.set-nth($_list, $_index * -1, $item);
    }

    $_result: list.join($_list, (), $_separator);
  }

  @return $_result;
}

@function slice-list($_list, $_start: 1, $_end: length($_list)) {
  $result: null;
  @if type-of($_start) != number or type-of($_end) != number {
    @warn "Either $_start or $_end are not a number for `slice-list`.";
  } @else if $_start > $_end {
    @warn "The start index has to be lesser than or equals to the end index for `slice-list`.";
  } @else if $_start < 1 or $_end < 1 {
    @warn "List indexes must be non-zero integers for `slice-list`.";
  } @else if $_start > length($_list) {
    @warn "List index is #{$_start} but list is only #{length($_list)} item long for `slice-list`.";
  } @else if $_end > length($_list) {
    @warn "List index is #{$_end} but list is only #{length($_list)} item long for `slice-list`.";
  } @else {
    $result: ();
    @for $i from $_start through $_end {
      $result: append($result, nth($_list, $i));
    }
  }

  @return $result;
}
