@use "sass:map";
@use "sass:math";
@use "sass:meta";
@use "sass:color";

@function is-color($_object) {
  @return meta.type-of($_object) == "color";
}

// Shades
@function get-shade-value($_value, $_isDark: false) {
  @if not $_isDark {
    @return $_value;
  }
  $_result: $_value - 50%;
  @return math.min(100%, $_result);
}

@function generate-color-shade($_color, $_degree: 1, $_withAlpha: false) {
  @if is-empty($_color) or is-null($_color) {
    @return transparent;
  }
  @if $_withAlpha {
    @return color.scale($_color, $alpha: $_degree * -10%);
  } @else {
    @return color.scale($_color, $lightness: $_degree, $saturation: $_degree);
  }
}

@function generate-color-with-contrast($_color, $_light: white, $_dark: black) {
  $_colorBrightness: round(
    math.div(
      (red($_color) * 299) + (green($_color) * 587) + (blue($_color) * 114),
      1000
    )
  );
  $_lightColor: round(
    math.div(
      (red($_light) * 299) + (green($_light) * 587) + (blue($_light) * 114),
      1000
    )
  );

  @if abs($_colorBrightness) < math.div($_lightColor, 2) {
    @return $_light;
  }

  @return $_dark;
}

// Colors
@function set-color-properties($_color, $_accent) {
  @return ("main": $_color, "accent": $_accent);
}

@function generate-color-shades-pack(
  $_color,
  $_scheme: $scheme,
  $_sort: desc /* asc or desc */,
  $_withAlpha: false,
  $_withSaturation: false,
  $_withContrast: false,
  $_lightAccent: white,
  $_darkAccent: black
) {
  $_result: ();

  $_length: $mColorShadesBeginning + ($mColorShadesRange * 2);
  $_start: $mColorShadesBeginning;
  $_end: $_length + 1;

  $_direction: 1;

  @if $_sort == desc {
    $_direction: -1;
  }
  @if $_scheme == dark {
    $_direction: $_direction * -1;
  }

  @for $_index from $_start to $_end {
    $_key: $_index * $mColorShadesStep;
    $_value: math.div(($_index * 100), $mColorShadesRange);
    $_percentage: ($_value - 100) * $_direction * 1%;

    $_shade: color.scale($_color, $lightness: $_percentage);

    @if $_withAlpha {
      $_degree: math.div($_index, ($_length * $_direction));
      @if $_direction == -1 {
        $_degree: 1 + $_degree;
      }
      $_shade: transparentize($_color, $_degree);
    } @else {
      @if $_withSaturation {
        $_shade: color.scale($_shade, $saturation: $_percentage * -1);
      }
    }

    $_result: map.set($_result, $_index * $mColorShadesStep, $_shade);

    @if $_withContrast {
      $_result: map.set(
        $_result,
        "on-#{$_index * $mColorShadesStep}",
        generate-color-with-contrast($_shade, $_lightAccent, $_darkAccent)
      );
    }
  }

  @return $_result;
}

@function generate-two-colors-properties(
  $_background,
  $_foreground,
  $_scheme: $scheme,
  $_configuration: $mButtonColorConfiguration,
  $_darkAccent: black,
  $_lightAccent: white
) {
  $_result: ();

  @each $_kind, $_config in $_configuration {
    @if is-list($_configuration) {
      // List
      $_index: 2;
      $_degree: 50;
      $_target: list-get-nth($_configuration, 1);

      $_shades: (
        main:
          generate-color-shades-pack(
            $_background,
            $_scheme,
            $_darkAccent: $_darkAccent,
            $_lightAccent: $_lightAccent
          ),
        accent: generate-color-shades-pack($_foreground, $_scheme),
      );

      @if length($_configuration) >= 2 {
        @if $_scheme == light {
          @if length($_configuration) >= 3 {
            $_index: 3;
          }
        }
        $_degree: list-get-nth($_configuration, $_index);
      }

      @if map-contains($_shades, $_target) {
        $_color: map.get($_shades, $_target);
        @return map.get($_color, $_degree);
      } @else {
        @return $_configuration;
      }
    } @else if is-map($_configuration) {
      // Map
      $_result: map.set(
        $_result,
        $_kind,
        generate-two-colors-properties(
          $_background,
          $_foreground,
          $_scheme,
          $_config,
          $_darkAccent: $_darkAccent,
          $_lightAccent: $_lightAccent
        )
      );
    } @else {
      // String or Color
      @return $_configuration;
    }
  }

  @return $_result;
}
